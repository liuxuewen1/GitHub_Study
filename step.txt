github_Study
============

ѧϰgithub

1 

���õ���ssh 
$ ssh-keygen -t rsa -C "your_email@youremail.com" 

�������passphrase�����룩 �س�ȷ��

��Կ��C�� .ssh �ļ����£���id_rsa.pub ȫ�����ƣ���github��վ�´���һ��SSH Public Keys

���������Ƿ���ȷ
$ ssh -T git@github.com

���� yes 

����ǰ�����õ�passphrase �س�����ʾ��¼�ɹ���Ok


2

��������Git��Ϣ

�����û���������
$ git config --global user.name "Firstname Lastname"

$ git config --global user.email "your_email@youremail.com"

�˴��û���Ϊʵ���������Զ���ģ�

3

����GitHub�ϴ���һ����Ŀ�� Repository
Ȼ���ڱ��ض�Ӧ����һ����ͬ��Ŀ���Ƶ�Ŀ¼������ִ���������
$ mkdir ~/Helloworld  ������HelloworldΪ�����ļ���
$ cd Helloworld ������ļ����� �������ȥҪ������Tank�ļ��У�$ cd ~/Tank

$ git init //Git��ʼ���ļ���
$ touch name_file ������Ϊname_file���ļ�������ֱ�����ļ������潨���ļ���
$ git add name_file //�����������������Ӳ��ڰ汾�����е����ļ���Ҳ�����������ڰ汾�����е��Ǹ��޸Ĺ����ļ�; �������������, Git�����õ�ǰ�ļ��Ŀ��ղ��Ұ������ݴ�(stage)�������У�Ϊ��һ��commit����׼����Git���ٵ������ݲ����ļ��������Ҫ���ӻ��޸Ķ�� $ git add .��
$ git commit -m '�ύ��desc ����' 
$ git remote add origin git@github.com:liuxuewen1/Helloworld.git  //�ύ
$ git push -u origin master //���͵�gitHub

---------------------克隆后push易出错解决办法--------------------------------
branch正确的情况下， 不知为什么，在push的时候总是出现：
[plain] view plaincopyprint?

    fatal: remote error:  
    You can't push to git://github.com/user_name/user_repo.git  
    Use git@github.com:user_name/user_repo.git  

的提示， 解决办法：

[plain] view plaincopyprint?

    $ git remote rm origin  
    $ git remote add origin git@github.com:user_name/user_repo.git  
    $ git push origin  


ok!
经过高人的点播，找到了原因：

如果在git clone的时候用的是

git://github.com:xx/xxx.git

的形式, 那么就会出现这个问题，因为这个protocol是不支持push的

用

[plain] view plaincopyprint?

    $git clone git@github.com:username/myNCCL.git  

就可以用git push了。


---------------------------2014.6.6----------------------------------------------------
删除某个文件，可以在文件夹删除也可以执行
$ rm <filename>     //rm命令删除的文件只是在本地进行了删除（相当于手动在本地删除文件），尚未添加到暂存区，也就是说，直接在工作区删除，对暂存区和版本库没有任何影响。
$ git rm <filename> //从当前的工作空间中和索引中删除文件
$ git commit -m 'test delete'
$ git push origin master


git checkout ...    //作用1：切换分支；作用2：恢复文件


----------------------------------2014.06.06分支的创建及合并----------------------------------------------------

创建分支命令：
$ git branch develop

切换到develop分支：
$ git checkout develop

或者用一句代码 就创建并转向develop分支：
$ git checkout -b develop

删除某个分支：
$ git branch -d develop

如果要将develop分支合并到master分支：
$ git checkout master
$ git merge develop

查看当前所有分支的情况
$ git branch
如果是当前所在分支 会在前面有个 * 号


如果master外有两个不同分支 develop、newtest，修改的地方有冲突，那么合并到master后，文件里面会把两个分支有冲突的地方像这样列出来：
<<<<<<<< HEAD
XXXXXX
=============
YYYYYYYYYY
>>>>>>>> develop
需要解决完冲突后重新提交 git add . git commit -m '...'

如果newtest分支修改完了，想合并到develop中，则需要先将newtest合并到master：
$ git checkout master
$ git merge newtest

然后再进入develop分支，将master合并进来
$ git checkout develop
$ git merge master

一般master主分支存放的是一个稳定或能够发布的版本
而新建一个develop的分支用于平时开发，一般长期使用
如果平时有紧急修改，可以加一个topic特性的分支，一般短期使用，用完后 即删除

---分支，是github的精华---

----------------------------------2014.06.06取消暂存文件----------------------------------------------------

$ git reset HEAD a.txt


----------------------------------2014.06.09获取远程分支文件----------------------------------------------------
将远程分支信息获取到：
$ git fetch

然后再将远程分支remote_branchname映射到本地命名为local-branchname  的一分支：
$ git checkout -b local-branchname origin/remote_branchname  










